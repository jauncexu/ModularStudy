apply plugin: 'com.android.application'

println("xjw ---> app Student hao 1")
println "xjw ---> app Student hao 2"

// 定义变量，可以优化性能，下次build时会自动导入
def app_android = getRootProject().ext.app_android

android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion

    defaultConfig {
        applicationId app_android.applicationId
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName

        testInstrumentationRunner app_android.testInstrumentationRunner

        // 让我的Java代码也可以用
        // 给Java代码暴漏，标记，正式环境 和 测试环境 的标记
        // 组件化 和 集成化 的时候需要
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }

    buildTypes {
        // 编译时就控制是走debug还是release路
        debug {
            buildConfigField("String", "debug", "\"${url.debug}\"")
        }

        release {
            buildConfigField("String", "release", "\"${url.release}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation 'com.google.android.material:material:1.2.1'
//    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // 更简洁的方式，由于我们config那边定义的是 map，那么是不是可以遍历map
    app_implementation.each {
        k, v -> implementation(v)
    }

    if (isRelease) {
        // 发布模式
        implementation project(':login')
        implementation project(':library')
        implementation project(':common')
    } else {
        // 组件运行
    }
}